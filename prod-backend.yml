version: '3'
volumes:
  static_files:
services:
  python: &python
    # image: python:3.4
    image: mertenssander/nictiz_webtools:latest
    build:
      context: .
      dockerfile: docker/prod/python/Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.base
      - PYTHONUNBUFFERED=1
    volumes:
      - static_files:/webserver/static_files
    command: gunicorn -w 4 app.wsgi -b 0.0.0.0:8000
    networks:
      - webtools
      - postgres_network
  
  nginx:
    # image: nginx
    build:
      context: .
      dockerfile: docker/prod/nginx/Dockerfile
    volumes:
      - static_files:/webserver/static_files
    links:
      - python
    expose:
      - "${PORT}"
    networks:
      - webtools
      - proxy
    environment:
      - VIRTUAL_HOST=${DJANGO_DOMAIN}
      - VIRTUAL_PORT=${PORT}
      - LETSENCRYPT_HOST=${DJANGO_DOMAIN}
      - LETSENCRYPT_EMAIL=${EMAIL}

  ## RabbitMQ as message queue for Celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    networks:
      - webtools
  celery_worker:
    # Copy template from service Python
    <<: *python
    command: celery -A app worker --scheduler django --loglevel=info
    ports: []
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - webtools
      - postgres_network
  celery_beat:
    # Copy template from service Python
    <<: *python
    command: celery -A app beat --loglevel info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    ports: []
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - webtools
      - postgres_network
  # GUI for taskmanager Celery
  flower:
    image: mher/flower
    command: ["flower", "--broker=amqp://guest:guest@rabbitmq/", "--port=8888", "--basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}"]
    restart: always
    expose:
      - "80"
    ports:
      - 9125:8888
    networks:
      - webtools
      - proxy
networks:
  webtools:
  postgres_network:
    external: true
  proxy:
    external: true